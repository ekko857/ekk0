likelihood.value <- binomial.likelihood(p)
plot(p,likelihood.value)
optimise(binomial.likelihood, interval = c(0,1), maximum = T)
####machine learning
#PCA
libarary(mvtnorm)
install.packages(mvnorm)
install.packages(mvtnorm)
install.packages(mvtnorm)
####machine learning
#PCA
libarary(mvtnorm)
install.packages(mvtnorm)
install.packages("mvtnorm")
####machine learning
#PCA
libarary(mvtnorm)
####machine learning
#PCA
libarary(mvtnorm)
library(mvtnorm)
set.seed(123)
covariance <- matrix(c(5,3,0,-3,0, 3,5,0,-3,0, 0,0,5,0,0,
-3,-3,0,6,0, 0,0,0,0,3), nrow=5)
covariance
data <- rmvnorm(1000, sigma=covariance)
names(data) <- c("a", "b", "c", "d", "e")
data
pca <- prcomp(data)
biplot(pca)
biplot(pca, choices=2:3)
pca
plot(pca$x[,2] ~ data[,3], xlab="'c' variable", ylab="PC2")
summary(pca)
plot(pca)
pca <- prcomp(data, scale=TRUE)
###PCoA
# Draw species' parameters
intercepts <- rnorm(20, mean=20)
env1 <- rnorm(20)
env2 <- rnorm(20)
# 加载必要的库
library(ggplot2)
# 生成模拟数据
set.seed(123) # 为了可重复性
n <- 100 # 样本数量
height <- rnorm(n, mean=170, sd=10) # 身高，平均170cm，标准差10
weight <- rnorm(n, mean=65, sd=15) # 体重，平均65kg，标准差15
age <- rnorm(n, mean=30, sd=10) # 年龄，平均30岁，标准差10
data <- data.frame(height, weight, age)
# 执行PCA
pca_result <- prcomp(data, scale=TRUE) # scale=TRUE表示先对数据进行标准化
# 查看主成分解释的方差比例
summary(pca_result)
# 使用biplot可视化PCA结果
biplot(pca_result, scale=0) # scale=0保持原始比例
# 可视化第一主成分和第二主成分
ggplot(as.data.frame(pca_result$x), aes(x=PC1, y=PC2)) +
geom_point() +
xlab("第一主成分 (PC1)") +
ylab("第二主成分 (PC2)") +
ggtitle("PCA分析结果")
pca_result$rotation
###PCoA
# Draw species' parameters
intercepts <- rnorm(20, mean=20)
env1 <- rnorm(20)
env2 <- rnorm(20)
# Create environment
env <- expand.grid(env1=seq(-3,3,.5), env2=seq(-3,3,.5))
biomass <- matrix(ncol=20, nrow=nrow(env))
for(i in seq_len(nrow(biomass)))
biomass[i,] <- intercepts + env1*env[i,1] + env2*env[i,2]
library(vegan)
dist <- dist(biomass)
pcoa <- cmdscale(dist, eig=TRUE)
barplot(pcoa$eig)
barplot(pcoa$eig)
plot(pcoa$points[,1:2], xlab="PCoA1", ylab="PCoA2")
plot(pcoa$points[,1:2], type="n", xlab="PCoA1", ylab="PCoA2")
text(pcoa$points[,1:2]+.25, labels=env[,1], col="red")
text(pcoa$points[,1:2]-.25, labels=env[,2], col="black")
###nmds
nmds <- metaMDS(dist)
plot(nmds)
stressplot(nmds)
plot(nmds)
orditorp(nmds, display="sites")
ordisurf(nmds, env[,1])
###2.3
mantel(dist, dist(env[,1]))
mantel(dist, dist(env))
library(quantreg)
data <- data.frame(dist=as.numeric(dist),
env1=as.numeric(dist(env[,1])), env2=as.numeric(dist(env[,2])))
model <- rq(dist ~ env1 + env2, data=data)
summary(model)
model <- rq(dist ~ env1 + env2, data=data)
library(quantreg)
install.packages("quantreg")
install.packages("quantreg")
library(quantreg)
data <- data.frame(dist=as.numeric(dist),
env1=as.numeric(dist(env[,1])), env2=as.numeric(dist(env[,2])))
model <- rq(dist ~ env1 + env2, data=data)
summary(model)
complex.model <- rq(dist ~ env1 + env2, data=data, tau=c(.2,.5,.8))
summary(complex.model)
summary(complex.model)
simple.eh <- rq(dist ~ env1, data=data)
with(data, plot(dist ~ env1, pch=20,
xlab="Environmental distance", ylab="Site similarity"))
abline(simple.eh, col="red", lwd=3)
##
library(tibble)
library(ggplot2)
library(vegan)
library(phyloseq)
library(dplyr)
getwd()
setwd("Documents/PROJECT")
data <- readRDS("data/16S/ps_16S_cESVs_clean_Ransome.RDS")
otu <- as.matrix(otu_table(data))
otu <- as.data.frame(otu)
View(otu)
sample_data_df<- data.frame(sample_data(data))
View(sample_data_df)
View(otu)
#####load packages
library(phyloseq)
library(ggplot2)
library(vegan)
library(dplyr)
#加载数据
se_score <- readRDS("Data/Stress_datasets/RESET_SE_score_Ransome.RDS")
cumul_score <- readRDS("Data/Stress_datasets/RESET_cumul_score_Ransome.RDS")
# 绘制时间序列图
ggplot(cumul_score, aes(x = date, y = RESET_score)) +
geom_line() +
geom_point() +
labs(title = "RESET Score Over Time", x = "Date", y = "RESET Score") +
theme_minimal()
sample_data_df <- sample_data_df %>% select(where(~ !any(is.na(.))))
View(sample_data_df)
# 计算每个 eventID 的总体 RESET_score 均值
mean_reset_score_by_id <- cumul_score %>%
group_by(eventID) %>%
summarize(mean_reset_score = mean(RESET_score, na.rm = TRUE))
# 查看结果
#print(mean_reset_score_by_id)
# 合并两个数据集 hill number和 reset score mean
sample_data_df<- data.frame(sample_data(data))
sample_data_df$sample_name <- rownames(sample_data_df)
hill_numbers$sample_name <- rownames(hill_numbers)
hill_numbers_with_sample <- left_join(hill_numbers, sample_data_df, by = "sample_name")
diversity_df$sample_name <- diversity_df$Sample
hill_numbers_with_sample <- left_join(hill_numbers_with_sample, diversity_df, by = 'sample_name')
hill_numbers <- read.csv("data/hill_numbers.csv")
View(hill_numbers)
hill_numbers$sample_name <- rownames(hill_numbers)
hill_numbers_with_sample <- left_join(hill_numbers, sample_data_df, by = "sample_name")
View(hill_numbers_with_sample)
class(hill_numbers)
sample_data_df<- data.frame(sample_data(data))
View(sample_data_df)
sample_data_df <- sample_data_df %>% select(where(~ !any(is.na(.))))
write.csv(sample_data_df, "data/sample_data.csv")
View(sample_data_df)
sample_data_df <- read.csv("data/sample_data.csv")
sample_data_df$sample_name <- rownames(sample_data_df)
View(sample_data_df)
sample_data_df <- read.csv("data/sample_data.csv")
sample_data_df$sample_name <- rownames(sample_data_df)
View(sample_data_df)
sample_data_df <- read.csv("data/sample_data.csv")
class(sample_data_df)
View(sample_data_df)
View(sample_data_df)
sample_data_df <- read.csv("data/sample_data.csv")
View(sample_data_df)
sample_data_df <- read.csv("data/sample_data.csv", row.names = TURE)
sample_data_df <- read.csv("data/sample_data.csv", row.names = "TURE")
sample_data_df <- read.csv("data/sample_data.csv", row.names = 1)
View(sample_data_df)
sample_data_df<- data.frame(sample_data(data))
sample_data_df <- sample_data_df %>% select(where(~ !any(is.na(.))))
View(hill_numbers)
hill_numbers <- read.csv("data/hill_numbers.csv", row.names = 1)
sample_data_df <- read.csv("data/sample_data.csv", row.names = 1)
sample_data_df$sample_name <- rownames(sample_data_df)
hill_numbers$sample_name <- rownames(hill_numbers)
hill_numbers_with_sample <- left_join(hill_numbers, sample_data_df, by = "sample_name")
diversity_df <- read.csv("data/bibury.csv", row.names = 1)
diversity_df$sample_name <- diversity_df$Sample
hill_numbers_with_sample <- left_join(hill_numbers_with_sample, diversity_df, by = 'sample_name')
hill_numbers_with_reset_score <- left_join(hill_numbers_with_sample, mean_reset_score_by_id, by = "eventID")
ggplot(hill_numbers_with_reset_score, aes(x = mean_reset_score, y = Bibury_Diversity)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(title = "Relationship between Bibury Diversity and Reset Score",
x = "Reset Score",
y = "Bibury Diversity") +
theme_minimal()
View(sample_data_df)
View(hill_numbers)
View(diversity_df)
View(sample_data_df)
View(sample_data_df)
hill_numbers <- left_join(hill_numbers, diversity_df, by = 'sample_name')
View(hill_numbers)
hill_numbers <- hill_numbers %>% select(-Sample)
View(hill_numbers)
write.csv(hill_numbers, 'data/hill_numbers.csv')
hill_numbers_with_sample <- left_join(hill_numbers, sample_data_df, by = 'sample_name')
View(hill_numbers_with_sample)
split_data <- split(hill_numbers_with_sample, hill_numbers_with_sample$sampleSizeFractionation)
View(split_data)
sample_100 <- split_data$100
sample_100 <- split_data[['100']]
sample_500 <- split_data[['500']]
sample_sessile <- split_data[['sessile']]
View(sample_500)
View(sample_100)
# 计算每个 eventID 的总体 RESET_score 均值
mean_reset_score_by_id <- cumul_score %>%
group_by(eventID) %>%
summarize(mean_reset_score = mean(RESET_score, na.rm = TRUE))
hill_numbers_with_reset_score <- left_join(hill_numbers_with_sample, mean_reset_score_by_id, by = "eventID")
split_data <- split(hill_numbers_with_reset_score, hill_numbers_with_reset_score$sampleSizeFractionation)
sample_100 <- split_data[['100']]
sample_500 <- split_data[['500']]
sample_sessile <- split_data[['sessile']]
View(sample_100)
ggplot(sample_100, aes(x = mean_reset_score, y = hill_number)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(title = paste(fraction_name, "- Relationship between Hill Number and Mean Reset Score"),
x = "Mean Reset Score",
y = "Hill Number") +
theme_minimal()
ggplot(sample_100, aes(x = mean_reset_score, y = hill_number)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(title = paste(sample_100, "- Relationship between Hill Number and Mean Reset Score"),
x = "Mean Reset Score",
y = "Hill Number") +
theme_minimal()
ggplot(sample_100, aes(x = mean_reset_score, y = N0)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(title = paste(sample_100, "- Relationship between Hill Number and Mean Reset Score"),
x = "Mean Reset Score",
y = "Hill Number") +
theme_minimal()
ggplot(sample_100, aes(x = mean_reset_score, y = N0)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(title ="- Relationship between Hill Number and Mean Reset Score"),
####################
# 定义绘图函数
plot_reset <- function(data) {
# 绘制N0与mean reset score的关系
p1 <- ggplot(data, aes(x = mean_reset_score, y = N0)) +
geom_point() +
geom_smooth(method = "lm", col = "blue") +
labs(title = "N0 vs Mean Reset Score",
x = "Mean Reset Score",
y = "N0")
# 绘制N1与mean reset score的关系
p2 <- ggplot(data, aes(x = mean_reset_score, y = N1)) +
geom_point() +
geom_smooth(method = "lm", col = "blue") +
labs(title = "N1 vs Mean Reset Score",
x = "Mean Reset Score",
y = "N1")
# 绘制N2与mean reset score的关系
p3 <- ggplot(data, aes(x = mean_reset_score, y = N2)) +
geom_point() +
geom_smooth(method = "lm", col = "blue") +
labs(title = "N2 vs Mean Reset Score",
x = "Mean Reset Score",
y = "N2")
# 绘制Bibury_Diversity与mean reset score的关系
p4 <- ggplot(data, aes(x = mean_reset_score, y = Bibury_Diversity)) +
geom_point() +
geom_smooth(method = "lm", col = "blue") +
labs(title = "Bibury Diversity vs Mean Reset Score",
x = "Mean Reset Score",
y = "Bibury Diversity")
# 使用gridExtra包将四个图表合并在一张图上
library(gridExtra)
grid.arrange(p1, p2, p3, p4, ncol = 2)
}
# 示例调用函数，假设数据框为data_100
plot_reset(sample_100)
plot_reset(sample_500)
plot_reset(sample_sessile)
hill_numbers_with_reset_score <- hill_numbers_with_reset_score %>%
mutate(N0_log = ifelse(N0 > 0, log(N0), NA),
N1_log = ifelse(N1 > 0, log(N1), NA),
N2_log = ifelse(N2 > 0, log(N2), NA))
split_data <- split(hill_numbers_with_reset_score, hill_numbers_with_reset_score$sampleSizeFractionation)
sample_100 <- split_data[['100']]
sample_500 <- split_data[['500']]
sample_sessile <- split_data[['sessile']]
plot_reset_log <- function(data) {
# 绘制N0与mean reset score的关系
p1 <- ggplot(data, aes(x = mean_reset_score, y = N0_log)) +
geom_point() +
geom_smooth(method = "lm", col = "blue") +
labs(title = "N0 vs Mean Reset Score",
x = "Mean Reset Score",
y = "N0")
# 绘制N1与mean reset score的关系
p2 <- ggplot(data, aes(x = mean_reset_score, y = N1_log)) +
geom_point() +
geom_smooth(method = "lm", col = "blue") +
labs(title = "N1 vs Mean Reset Score",
x = "Mean Reset Score",
y = "N1")
# 绘制N2与mean reset score的关系
p3 <- ggplot(data, aes(x = mean_reset_score, y = N2_log)) +
geom_point() +
geom_smooth(method = "lm", col = "blue") +
labs(title = "N2 vs Mean Reset Score",
x = "Mean Reset Score",
y = "N2")
# 绘制Bibury_Diversity与mean reset score的关系
p4 <- ggplot(data, aes(x = mean_reset_score, y = Bibury_Diversity)) +
geom_point() +
geom_smooth(method = "lm", col = "blue") +
labs(title = "Bibury Diversity vs Mean Reset Score",
x = "Mean Reset Score",
y = "Bibury Diversity")
# 使用gridExtra包将四个图表合并在一张图上
library(gridExtra)
grid.arrange(p1, p2, p3, p4, ncol = 2)
}
plot_reset_log(sample_100)
plot_reset_log <- function(data) {
# 绘制N0与mean reset score的关系
p1 <- ggplot(data, aes(x = mean_reset_score, y = N0_log)) +
geom_point() +
geom_smooth(method = "lm", col = "blue") +
labs(title = "N0_log vs Mean Reset Score",
x = "Mean Reset Score",
y = "N0_log")
# 绘制N1与mean reset score的关系
p2 <- ggplot(data, aes(x = mean_reset_score, y = N1_log)) +
geom_point() +
geom_smooth(method = "lm", col = "blue") +
labs(title = "N1_log vs Mean Reset Score",
x = "Mean Reset Score",
y = "N1_log")
# 绘制N2与mean reset score的关系
p3 <- ggplot(data, aes(x = mean_reset_score, y = N2_log)) +
geom_point() +
geom_smooth(method = "lm", col = "blue") +
labs(title = "N2_log vs Mean Reset Score",
x = "Mean Reset Score",
y = "N2_log")
# 绘制Bibury_Diversity与mean reset score的关系
p4 <- ggplot(data, aes(x = mean_reset_score, y = Bibury_Diversity)) +
geom_point() +
geom_smooth(method = "lm", col = "blue") +
labs(title = "Bibury Diversity vs Mean Reset Score",
x = "Mean Reset Score",
y = "Bibury Diversity")
# 使用gridExtra包将四个图表合并在一张图上
library(gridExtra)
grid.arrange(p1, p2, p3, p4, ncol = 2)
}
plot_reset_log(sample_100)
plot_reset_log(sample_500)
plot_reset_log(sample_sessile)
View(sample_sessile)
View(cumul_score)
View(model)
View(se_score)
View(cumul_score)
# 绘制时间序列图
ggplot(cumul_score, aes(x = date, y = RESET_score, color = eventID)) +
geom_line() +
geom_point() +
labs(title = "RESET Score over Time for Each Event",
x = "Date",
y = "RESET Score") +
theme_minimal() +
theme(legend.position = "right") +
scale_color_discrete(name = "Event ID")
# 绘制时间序列图
# 使用 facet_wrap 创建小图
ggplot(cumul_score, aes(x = date, y = RESET_score)) +
geom_line() +
geom_point() +
facet_wrap(~ eventID, scales = "free_y") +
labs(title = "RESET Score over Time for Each Event",
x = "Date",
y = "RESET Score") +
theme_minimal()
View(hill_numbers_with_sample)
reset_score_diff <- cumul_score %>%
group_by(eventID) %>%
summarise(
max_reset_score = max(RESET_score, na.rm = TRUE),
min_reset_score = min(RESET_score, na.rm = TRUE),
diff_reset_score = max_reset_score - min_reset_score
) %>%
ungroup()
View(reset_score_diff)
View(mean_reset_score_by_id)
hill_numbers_with_reset_score <- left_join(hill_numbers_with_reset_score, reset_score_diff, by = "eventID")
View(hill_numbers_with_reset_score)
View(sample_100)
View(mean_reset_score_by_id)
View(hill_numbers_with_reset_score)
hill_numbers_with_reset_score <- hill_numbers_with_reset_score %>%
mutate(N0_log = ifelse(N0 > 0, log(N0), NA),
N1_log = ifelse(N1 > 0, log(N1), NA),
N2_log = ifelse(N2 > 0, log(N2), NA))
split_data <- split(hill_numbers_with_reset_score, hill_numbers_with_reset_score$sampleSizeFractionation)
sample_100 <- split_data[['100']]
sample_500 <- split_data[['500']]
sample_sessile <- split_data[['sessile']]
plot_reset_diff_log <- function(data) {
plot_reset_diff_log <- function(data) {
# 绘制N0与mean reset score的关系
p1 <- ggplot(data, aes(x = diff_reset_score, y = N0_log)) +
geom_point() +
geom_smooth(method = "lm", col = "blue") +
labs(title = "N0_log vs Mean Reset Score",
x = "Mean Reset Score",
y = "N0_log")
# 绘制N1与mean reset score的关系
p2 <- ggplot(data, aes(x = diff_reset_score, y = N1_log)) +
geom_point() +
geom_smooth(method = "lm", col = "blue") +
labs(title = "N1_log vs Mean Reset Score",
x = "Mean Reset Score",
y = "N1_log")
# 绘制N2与mean reset score的关系
p3 <- ggplot(data, aes(x = diff_reset_score, y = N2_log)) +
geom_point() +
geom_smooth(method = "lm", col = "blue") +
labs(title = "N2_log vs Mean Reset Score",
x = "Mean Reset Score",
y = "N2_log")
# 绘制Bibury_Diversity与mean reset score的关系
p4 <- ggplot(data, aes(x = diff_reset_score, y = Bibury_Diversity)) +
geom_point() +
geom_smooth(method = "lm", col = "blue") +
labs(title = "Bibury Diversity vs Mean Reset Score",
x = "Mean Reset Score",
y = "Bibury Diversity")
}
plot_reset_diff_log <- function(data) {
# 绘制N0与mean reset score的关系
p1 <- ggplot(data, aes(x = diff_reset_score, y = N0_log)) +
geom_point() +
geom_smooth(method = "lm", col = "blue") +
labs(title = "N0_log vs Mean Reset Score",
x = "Mean Reset Score",
y = "N0_log")
# 绘制N1与mean reset score的关系
p2 <- ggplot(data, aes(x = diff_reset_score, y = N1_log)) +
geom_point() +
geom_smooth(method = "lm", col = "blue") +
labs(title = "N1_log vs Mean Reset Score",
x = "Mean Reset Score",
y = "N1_log")
# 绘制N2与mean reset score的关系
p3 <- ggplot(data, aes(x = diff_reset_score, y = N2_log)) +
geom_point() +
geom_smooth(method = "lm", col = "blue") +
labs(title = "N2_log vs Mean Reset Score",
x = "Mean Reset Score",
y = "N2_log")
# 绘制Bibury_Diversity与mean reset score的关系
p4 <- ggplot(data, aes(x = diff_reset_score, y = Bibury_Diversity)) +
geom_point() +
geom_smooth(method = "lm", col = "blue") +
labs(title = "Bibury Diversity vs Mean Reset Score",
x = "Mean Reset Score",
y = "Bibury Diversity")
# 使用gridExtra包将四个图表合并在一张图上
library(gridExtra)
grid.arrange(p1, p2, p3, p4, ncol = 2)
}
plot_reset_diff_log(sample_100)
1
q
q
end
end()
plot_reset_diff_log(sample_100)
# 绘制时间序列图
# 使用 facet_wrap 创建小图
ggplot(cumul_score, aes(x = date, y = RESET_score)) +
geom_line() +
geom_point() +
facet_wrap(~ eventID, scales = "free_y") +
labs(title = "RESET Score over Time for Each Event",
x = "Date",
y = "RESET Score") +
theme_minimal()
source("~/Documents/PROJECT/code/stress分析.R", echo=TRUE)
# 使用gridExtra包将四个图表合并在一张图上
library(gridExtra)
# 使用gridExtra包将四个图表合并在一张图上
library(gridExtra)
# 使用gridExtra包将四个图表合并在一张图上
library(gridExtra)
